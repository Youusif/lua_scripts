--local variables for API. Automatically generated by https://github.com/simpleavaster/gslua/blob/master/authors/sapphyrus/generate_api.lua 
local client_latency, client_log, client_draw_rectangle, client_draw_circle_outline, client_userid_to_entindex, client_draw_indicator, client_draw_gradient, client_set_event_callback, client_screen_size, client_eye_position = client.latency, client.log, client.draw_rectangle, client.draw_circle_outline, client.userid_to_entindex, client.draw_indicator, client.draw_gradient, client.set_event_callback, client.screen_size, client.eye_position 
local client_draw_circle, client_color_log, client_delay_call, client_draw_text, client_visible, client_exec, client_trace_line, client_set_cvar = client.draw_circle, client.color_log, client.delay_call, client.draw_text, client.visible, client.exec, client.trace_line, client.set_cvar 
local client_world_to_screen, client_draw_hitboxes, client_get_cvar, client_draw_line, client_camera_angles, client_draw_debug_text, client_random_int, client_random_float = client.world_to_screen, client.draw_hitboxes, client.get_cvar, client.draw_line, client.camera_angles, client.draw_debug_text, client.random_int, client.random_float 
local entity_get_local_player, entity_is_enemy, entity_hitbox_position, entity_get_player_name, entity_get_steam64, entity_get_bounding_box, entity_get_all, entity_set_prop = entity.get_local_player, entity.is_enemy, entity.hitbox_position, entity.get_player_name, entity.get_steam64, entity.get_bounding_box, entity.get_all, entity.set_prop 
local entity_is_alive, entity_get_player_weapon, entity_get_prop, entity_get_players, entity_get_classname = entity.is_alive, entity.get_player_weapon, entity.get_prop, entity.get_players, entity.get_classname 
local globals_realtime, globals_absoluteframetime, globals_tickcount, globals_curtime, globals_mapname, globals_tickinterval, globals_framecount, globals_frametime, globals_maxplayers = globals.realtime, globals.absoluteframetime, globals.tickcount, globals.curtime, globals.mapname, globals.tickinterval, globals.framecount, globals.frametime, globals.maxplayers 
local ui_new_slider, ui_new_combobox, ui_reference, ui_set_visible, ui_is_menu_open, ui_new_color_picker, ui_set_callback, ui_set, ui_new_checkbox, ui_new_hotkey, ui_new_button, ui_new_multiselect, ui_get = ui.new_slider, ui.new_combobox, ui.reference, ui.set_visible, ui.is_menu_open, ui.new_color_picker, ui.set_callback, ui.set, ui.new_checkbox, ui.new_hotkey, ui.new_button, ui.new_multiselect, ui.get 
local math_ceil, math_tan, math_log10, math_randomseed, math_cos, math_sinh, math_random, math_huge, math_pi, math_max, math_atan2, math_ldexp, math_floor, math_sqrt, math_deg, math_atan, math_fmod = math.ceil, math.tan, math.log10, math.randomseed, math.cos, math.sinh, math.random, math.huge, math.pi, math.max, math.atan2, math.ldexp, math.floor, math.sqrt, math.deg, math.atan, math.fmod 
local math_acos, math_pow, math_abs, math_min, math_sin, math_frexp, math_log, math_tanh, math_exp, math_modf, math_cosh, math_asin, math_rad = math.acos, math.pow, math.abs, math.min, math.sin, math.frexp, math.log, math.tanh, math.exp, math.modf, math.cosh, math.asin, math.rad 
local table_maxn, table_foreach, table_sort, table_remove, table_foreachi, table_move, table_getn, table_concat, table_insert = table.maxn, table.foreach, table.sort, table.remove, table.foreachi, table.move, table.getn, table.concat, table.insert 
local string_find, string_format, string_rep, string_gsub, string_len, string_gmatch, string_dump, string_match, string_reverse, string_byte, string_char, string_upper, string_lower, string_sub = string.find, string.format, string.rep, string.gsub, string.len, string.gmatch, string.dump, string.match, string.reverse, string.byte, string.char, string.upper, string.lower, string.sub 
--end of local variables

local steps = {}
local last_step = {}
local scope_level_player = {}
local weapon_mode_player = {}
local weapon_prev_player = {} 

local teammates_reference = ui.reference("VISUALS", "Player ESP", "Teammates")
local step_enabled = ui_new_checkbox("VISUALS", "Player ESP", "Visualize steps")
local step_color = ui_new_color_picker("VISUALS", "Player ESP", "Step color", 150, 200, 60, 150)

local function draw_circle_3d(ctx, x, y, z, radius, r, g, b, a, accuracy, width, outline)
	local accuracy = accuracy or 3
	local width = width or 1
	local outline = outline or false
	local screen_x_line_old, screen_y_line_old
	for rot=0, 360,accuracy do
		local rot_temp = math_rad(rot)
		local lineX, lineY, lineZ = radius * math_cos(rot_temp) + x, radius * math_sin(rot_temp) + y, z
		local screen_x_line, screen_y_line = client.world_to_screen(ctx, lineX, lineY, lineZ)
		if screen_x_line ~=nil and screen_x_line_old ~= nil then
			for i=1, width do
				local i=i-1
				client_draw_line(ctx, screen_x_line, screen_y_line-i, screen_x_line_old, screen_y_line_old-i, r, g, b, a)
			end
			if outline then
				local outline_a = a/255*160
				client_draw_line(ctx, screen_x_line, screen_y_line-width, screen_x_line_old, screen_y_line_old-width, 16, 16, 16, outline_a)
				client_draw_line(ctx, screen_x_line, screen_y_line+1, screen_x_line_old, screen_y_line_old+1, 16, 16, 16, outline_a)
			end
		end
		screen_x_line_old, screen_y_line_old = screen_x_line, screen_y_line
	end
end

local function distance(x1, y1, z1, x2, y2, z2)
	return math_sqrt((x2-x1)*(x2-x1) + (y2-y1)*(y2-y1) + (z2-z1)*(z2-z1))
end

local function contains(table, val)
	for i=1,#table do
		if table[i] == val then 
			return true
		end
	end
	return false
end

local function on_enabled_change()
	local enabled = ui_get(step_enabled)
end
ui.set_callback(step_enabled, on_enabled_change)
on_enabled_change()

local function reset()
	steps = {}
	last_step = {}
	scope_level_player = {}
	weapon_mode_player = {}
end
client.set_event_callback("round_start", reset)

local function is_enemy(player)
	return entity_get_prop(player, "m_iTeamNum") ~= entity_get_prop(entity_get_local_player(), "m_iTeamNum")
end

local function on_noise(player)
	if player ~= nil and ((ui_get(teammates_reference) and player ~= entity_get_local_player()) or is_enemy(player)) then --and and contains(entity_get_players(), player) 
		local curtime = globals_curtime()
		local local_x, local_y, local_z = entity_get_prop(entity_get_local_player(), "m_vecAbsOrigin")
		local max_distance = 3500
		local x, y, z = entity_get_prop(player, "m_vecAbsOrigin")
		if x ~= nil then
			if max_distance > distance(local_x, local_y, local_z, x, y, z) then
				table_insert(steps, {curtime, x, y, z, player})
			end
		end
	end
end

local function on_noise_event(e)
	local player = client_userid_to_entindex(e.userid)
	on_noise(player)
end
client.set_event_callback("player_footstep", on_noise_event)

local function on_paint(ctx)
	local enabled = ui_get(step_enabled)
	if not enabled then
		return
	end

	if #steps > 0 then
		local curtime = globals_curtime()
		local duration = 3
		local r, g, b, a = ui_get(step_color)
		local steps_new = {}
		for i=1, #steps do
			local step = steps[i]

			local opacity_multiplier_dormant = step[6]
			if opacity_multiplier_dormant == nil then
				_, _, _, _, opacity_multiplier_dormant = entity_get_bounding_box(ctx, step[5])
				if step[5] == entity_get_local_player() then opacity_multiplier_dormant = 1 end
			end
			step[6] = opacity_multiplier_dormant

			if step[1] + duration > curtime and opacity_multiplier_dormant > 0 then
				local time_since_step = curtime - step[1]
				local opacity_multiplier = 1
				local size_multiplier = ((time_since_step) / duration)
				if duration-time_since_step < duration then
					opacity_multiplier = (duration - time_since_step) / duration
				end
				opacity_multiplier = math_min(opacity_multiplier, 1)
				opacity_multiplier = math_max(opacity_multiplier, 0)
				
				local wx, wy = client_world_to_screen(ctx, step[2], step[3], step[4])

				if wx ~= nil then
					client_draw_text(ctx, wx, wy, r, g, b, a*opacity_multiplier, "-", 0, "STEP")
				end
				table_insert(steps_new, step)
			end
		end
		steps = steps_new
	end
end
client.set_event_callback("paint", on_paint)

local function on_run_command(e)
	local scope_level_player_prev = scope_level_player
	local weapon_mode_player_prev = weapon_mode_player
	scope_level_player = {}
	weapon_mode_player = {}

	local players = entity_get_players(not ui_get(teammates_reference))
	
	for i=1, #players do
		local player = players[i]
		local weapon = entity_get_player_weapon(player)
		if weapon ~= nil then
			local weapon_name = entity_get_classname(weapon)
			local scope_level = entity_get_prop(weapon, "m_zoomLevel")
			if scope_level ~= nil and 3 > scope_level and scope_level >= 0 then
				scope_level_player[player] = scope_level
				if weapon_prev_player[player] == weapon and scope_level_player_prev[player] ~= nil and scope_level_player_prev[player] ~= scope_level then
					--client.log("changed from ", scope_level_player_prev[player], " to ", scope_level)
					on_noise(player)
				end
			end
			if weapon_name == "CWeaponFamas" or weapon_name == "CWeaponGlock" then
				local weapon_mode = entity_get_prop(weapon, "m_weaponMode")
				if weapon_prev_player[player] == weapon and weapon_mode ~= nil and 3 > weapon_mode and weapon_mode >= 0 then
					weapon_mode_player[player] = weapon_mode
					if weapon_mode_player_prev[player] ~= nil and weapon_mode_player_prev[player] ~= weapon_mode then
						--client.log("changed from ", weapon_mode_player_prev[player], " to ", weapon_mode)
						on_noise(player)
					end
				end
			end
			weapon_prev_player[player] = weapon
		end
	end
end
client.set_event_callback("run_command", on_run_command)